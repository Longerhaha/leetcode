#define MIN(x, y) (x>=y?y:x)
/*
 * 使用动态规划算法
 * dp[i][j]代表word1[0, 1, ..., i-1]与word2[0, 1, ..., j-1]间转化需要的最小操作
 * 1、如果word1[i-1]与word2[j-1]相等
 *    dp[i][j] = dp[i-1][j-1]  
 * 2、如果word1[i-1]与word2[j-1]不相等 
 *    (1)若执行替换操作，则dp[i][j] = dp[i-1][j-1]+1
 *    (2)若执行删除操作，则dp[i][j] = dp[i-1][j]+1
 *    (3)若执行插入操作，则dp[i][j] = dp[i][j-1]+1    
 *    归纳即dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])+1
 */
int minDistance(char* word1, char* word2) {
    int len_word1 = strlen(word1);
    int len_word2 = strlen(word2);
    //printf("%d, %d\n", len_word1, len_word2);
    //处理边界
    int dp[len_word1+1][len_word2+1];
    //处理行边界
    for(int j=0; j<=len_word2; j++){
        dp[0][j] = j; //插入i个数据到word1（空字符串）才能和word2一样
    }
    //处理列边界
    for(int i=0; i<=len_word1; i++){
        dp[i][0] = i; //word1删除i个数据到才能和word2（空字符串）一样
    }
    
    //根据规则递归
    for(int i=1; i<=len_word1; i++){
        for(int j=1; j<=len_word2; j++){
            dp[i][j] = (word1[i-1]==word2[j-1])?dp[i-1][j-1]:MIN(dp[i-1][j-1], MIN(dp[i-1][j], dp[i][j-1]))+1;
        }
    }
    
    return dp[len_word1][len_word2];
}
int trap(int* height, int heightSize) {
    
    /*该思路失败
    int pos_start_trap = 0;
    int pos_searchend_trap = 1;
    int i = 0;
    int accumulate_rain = 0;
    //预处理  从左往右搜索第一个下降的格子点
    while(height[pos_start_trap+1] >= height[pos_start_trap])
        pos_start_trap++;
    
    pos_searchend_trap = pos_start_trap +2;//下一个点肯定比当前位置小，直接搜索下下一个
    while(pos_searchend_trap < heightSize){
        //往右边搜索
        if(height[pos_searchend_trap] < height[pos_start_trap]) //无法形成雨滴
            pos_searchend_trap++;
        else{
            for(i=pos_start_trap+1;i<pos_searchend_trap;i++)
                accumulate_rain += (height[pos_start_trap]-height[i]);
            pos_start_trap = pos_searchend_trap; 
            pos_searchend_trap++;
        }
    }
    //最后一个陷阱的处理（可能有陷阱也可能没有了）
    if(pos_start_trap == heightSize)//刚好处理完
        return accumulate_rain;
    else{ //形如该题的最后一个陷阱
        accumulate_rain += trap(height+pos_searchend_trap+1, heightSize-pos_searchend_trap);
    }
    return accumulate_rain;*/
	
	
	
    int max_pos = 0;
    int lmax = height[0];
    int rmax = height[heightSize-1];
    int accumulate_rain = 0;
    int i;
    
    if(heightSize == 0)
        return 0;
    //找到最大的位置，然后左边向右搜索，右边向左搜索，搜索的原则就是大吃小
    for(i=0; i<heightSize; i++){
        if(height[i] > height[max_pos])
            max_pos = i;
    }
    //左边向右搜索,见到比自己小的就吃掉它，能容纳的雨滴就是你比他高出的高度
    for(i=1; i<max_pos; i++){
        if(lmax > height[i])
            accumulate_rain += lmax-height[i];
        else
            lmax = height[i];
    }
    //右边向左搜索,见到比自己小的就吃掉它，能容纳的雨滴就是你比他高出的高度
    for(i=heightSize-2; i>max_pos; i--){
        if(rmax > height[i])
            accumulate_rain += rmax-height[i];
        else
            rmax = height[i];
    }
    
    return accumulate_rain;
    
}
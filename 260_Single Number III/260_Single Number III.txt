/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */
/*
 * 1.将所有的数异或起来
 * 2.找出异或结果的最低位x并根据x位是否为1分组
 * 3.将异或结果与x位是1的一组数异或则为其中一个数，将异或结果与x为是0的一组数异或则为另外一个数
 */
int* singleNumber(int* nums, int numsSize, int* returnSize) {
    int* rslt = (int*)malloc(sizeof(int) * 2);
    assert(rslt != NULL);

    int xor_rslt = 0;
    //1.将所有的数异或起来
    for( int i = 0; i < numsSize; i++ )
        xor_rslt ^= nums[i];
    
    rslt[0] = xor_rslt;
    rslt[1] = xor_rslt;
    
    //找出异或结果的最低位即x位为1，其他位为0所代表的值，即为掩码
    int mask = xor_rslt & -xor_rslt;
    //分组再次异或
    for( int i = 0; i < numsSize; i++ ){
        if(nums[i] & mask)
            rslt[0] ^= nums[i];
        else
            rslt[1] ^= nums[i];
    }
    *returnSize = 2;
    return rslt;
}
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *columnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
#define MAX_NUM 1000
#define MAX_ROW_NUM 100
/*
 * 属于寻找子集的问题
 * 使用遵循深度优先搜索的回溯法
 *
 * ans_data：组合二维数据的二维指针
 * candidates：组合的数据的一维指针
 * candidatesSize：组合的数组数据的长度
 * target：查找目标
 * columnSizes：指向一维组合长度数组的指针
 * cmbnSum_num：递归到第几个组合和为target
 * dfs_idx：递归到第几个数
 * depth：记录递归深度
 *
 *
 * 递归时：target小于0则说明无法组合，于是递归结束
 *        target等于0说明可以找到这样的一个组合，于是记录长度，继续查找下一个可能的组合。注意要申请下一个节点的空间并复制上个组合内容，防止*cmbnSum_num  改变后导致之前递归的数据丢失
 *        target大于0则继续递归，递归从数dfs_idx开始递归，直到candidatesSize-1，每次递归深度depth+1
 *
 * 
 */
void combinationSum_backTrack(int** ans_data, const int* candidates, const int candidatesSize, const int target, int** columnSizes, int* cmbnSum_num, int depth, const int dfs_idx){
    /* 
     * 已经小于0，退出
     */
    if(target < 0)
        return ;
    else if(target == 0){
        //记录长度
        (*columnSizes)[*cmbnSum_num] = depth;
        //继续查找下一个可能的组合
        *cmbnSum_num += 1;
        //申请下一个节点的空间并复制上个组合内容，防止*cmbnSum_num改变后导致之前递归的数据丢失
        ans_data[*cmbnSum_num] = malloc(sizeof(int)*MAX_ROW_NUM);
        if(NULL == ans_data[*cmbnSum_num]){
            printf("malloc ans_data[%d] memory error!\n", *cmbnSum_num);
        }
        memcpy(ans_data[*cmbnSum_num], ans_data[(*cmbnSum_num)-1], sizeof(int)*depth);
        (*columnSizes)[*cmbnSum_num] = 0;
        return ;
    }
    else{
        /* 
         * target大于0则继续寻找
         * 寻找时从数dfs_idx开始递归，直到candidatesSize-1
         */
        for(int i=dfs_idx; i<candidatesSize; i++){
            ans_data[*cmbnSum_num][depth] = candidates[i];
            combinationSum_backTrack(ans_data, candidates, candidatesSize, target-candidates[i], columnSizes, cmbnSum_num, depth+1, i);
        }
    }
    return ; 
}

int** combinationSum(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {
    /*
     * 申请组合总和为target的内存空间
     * ans是一个指向二维数组的指针
     */
    int** ans = (int**)malloc(sizeof(int*)*MAX_NUM);
    if(NULL == ans){
        printf("malloc ans memory error!\n");
        return NULL;
    }
    /*int** p = ans; 
    for(p=ans; p<ans+MAX_NUM; p++){
        p[0] = (int*)malloc(sizeof(int)*target);
        if(NULL == p[0]){
            printf("malloc ans[%d] memory error!\n", p-ans);
            return NULL;
        }
    }*/
    ans[0] = (int*)malloc(sizeof(int)*MAX_ROW_NUM);
    if(NULL == ans[0]){
        printf("malloc ans[0] memory error!\n");
        return NULL;
    }
    
    
    /*
     * 申请columnSizes的内存空间
     * columnSizes是一个指向各个组合的长度（数组形式）的指针
     */
    *columnSizes = (int *)malloc(sizeof(int)*MAX_NUM);
    if(*columnSizes == NULL){
        printf("malloc columnSizes memory error!\n");
        return NULL;
    }
    
    int nums[target];
    int ans_num = 0;
    combinationSum_backTrack(ans, candidates, candidatesSize, target, columnSizes, &ans_num, 0, 0);

    *returnSize = ans_num;
    
    return ans;
}
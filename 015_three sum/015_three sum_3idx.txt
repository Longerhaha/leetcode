//使用三个下标
//先排序，然后在三下标遍历，其中i遍历一遍，j和k夹逼遍历一遍
//算法复杂度O(n^2)+O(nlogn)，其中O(n^2)是两次遍历，O(nlogn)是排序


//升序
int cmp_inc (const void *a , const void *b ){ 
    return (*(int *)a - *(int *)b); 
} 

int** threeSum(int* nums, int numsSize, int* returnSize) {
    int i=0, j=0, k, num1, num2, num3, num_res=0, zero_num=0;
    int res_maxSize = numsSize*6;
    //申请二维指针
    int **res = (int**)malloc(sizeof(int*)*(res_maxSize));
    
    //升序排序,有利于重复三元组的判定
    qsort(nums, numsSize, sizeof(int), cmp_inc);
    int flag_i_success = 0;
    for(i=0; i<numsSize-2; i++){
        if(nums[i] > 0)
            continue;
        if(i>=1 && nums[i]==nums[i-1])
        {
            if(flag_i_success){ //若第i-1轮找到了，则跳过有重复数据直至其与下一个数据不等
                while(nums[i]==nums[i-1])
                    i++;
            }
            flag_i_success = 0;//i论有找到的标志
        }
        j = i+1;//j位于i的下一个下标
        k = numsSize-1;//k位于数据末尾
        while(j < k){
            //处理三数中的第二个数重复的数据
            if(nums[j] == nums[j+1]){
                if(0 == (nums[i]+2*nums[j])){
                    res[num_res] = (int*)malloc(sizeof(int)*3); 
                    res[num_res][0] = nums[i];
                    res[num_res][1] = nums[j];
                    res[num_res][2] = nums[j];
                    num_res++;
                    flag_i_success = 1;
                }
                while(nums[j] == nums[j+1]) //直到与下个数不等
                    j+=1;    
            }
            //处理三数中的第三个数重复的数据
            if(k>j && nums[k]==nums[k-1]){
                if(0 == (nums[i]+2*nums[k])){
                    res[num_res] = (int*)malloc(sizeof(int)*3); 
                    res[num_res][0] = nums[i];
                    res[num_res][1] = nums[k];
                    res[num_res][2] = nums[k];
                    num_res++;
                    flag_i_success = 1;
                }
                while(nums[k] == nums[k-1]) //直到与下个数不等
                    k-=1;    
            }    
                
            if(0==(nums[i]+nums[j]+nums[k]) && j<k){
                res[num_res] = (int*)malloc(sizeof(int)*3); 
                res[num_res][0] = nums[i];
                res[num_res][1] = nums[j];
                res[num_res][2] = nums[k];
                num_res++;
                j+=1; 
                flag_i_success = 1;
            }
            else if((-(nums[i]+nums[j]))<=nums[k])
                k--;
            else
                j++;
        }
    }
    *returnSize = num_res;
    return res;
    
}
#define MIN(a, b) (a>=b?b:a)
/*
 * 使用动态规划算法
 * dp[i][j]表示grid[0][0]到grid[i][j]的最小路径和
 * 每次只能向下或者向右移动一步
 * dp[i][j] = min(dp[i-1][j], dp[i][j-1])+grid[i][j]
 */
int minPathSum(int** grid, int gridRowSize, int gridColSize) {
    /*
    int** dp = (int**)malloc(sizeof(int*)*gridRowSize);
    //申请dp的内存空间
    if(NULL == dp){
        printf("malloc min_path_sum memory error!\n");
        return -1;
    }
    for(int i=0; i<gridRowSize; i++){
        dp[i] = (int*)malloc(sizeof(int)*gridColSize);
        if(NULL == dp[i]){
            printf("malloc dp[%d] memory error!\n", i);
            return -1;
        }
    }*/
    int dp[gridRowSize][gridColSize];
    //根据规则（每次只能向下或者向右移动一步）边界初始化
    dp[0][0] = grid[0][0];
    //第一行初始化
    for(int i=1; i<gridColSize; i++)
        dp[0][i] = dp[0][i-1]+grid[0][i];
    //第一列初始化
    for(int j=1; j<gridRowSize; j++)
        dp[j][0] = dp[j-1][0]+grid[j][0];
    
    for(int i=1; i<gridRowSize; i++)
        for(int j=1; j<gridColSize; j++){
            dp[i][j] = MIN(dp[i-1][j], dp[i][j-1])+grid[i][j];
        }
    
    int ans = dp[gridRowSize-1][gridColSize-1];
    /*
    for(int i=0; i<gridRowSize; i++)
        free(dp[i]);
    free(dp);*/
    return ans;
}
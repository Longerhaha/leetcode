/**
 * Return an array of arrays of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */

/*
 *JUDGE_CHARACTER算法是根据输入的k从低到到判断每个位置上的符号该是什么，该算法时间复杂度低（O（n^2））
 *NEXT_PERMUTATION算法是基于31道题的下一个排列，流程是先构造一个排列，然后进行k-1次下一个排列即是第k个排列，时间复杂度较高（O（kn））。
 */
enum ALGORITHM{
    JUDGE_CHARACTER, NEXT_PERMUTATION 
};

#define ALGORITHM_SELECT JUDGE_CHARACTER


#if(ALGORITHM_SELECT == JUDGE_CHARACTER)
    /*
     *
     * 函数功能：从nums数组中找出第idx_unUsed个未被选择过的数据
     * 函数输入：
     *         int nums[]：nums[i] == 0代表字符i还未被选择过，否则代表已经被选择了
     *         numsSize：数组的大小
     *         k:第k个未用的字符
     * 函数输出
     *         int：输出第k个未用的字符（注意是整形，你需要把他转化为字符型，即1转换为'1'）
     */
    int find(int nums[], int numsSize, int k){
        if(k > numsSize){
            printf("input idx of function find error!\n");
            return -1;
        }
        int num_unUsed = 0;//对nums数组中未用的字符的计数
        for(int i=0; i<numsSize; i++){
            if(nums[i] == 0){//未用
                if(num_unUsed == k-1){
                    nums[i] = 1;//置1表示已用
                    return i+1;//输出第k个未用的字符
                }
                else
                    num_unUsed++;
            }      
        }
        return -1;//有错
    }
    /*
     * 基于位置字符判断的方法
     * 输入k，先求n-1的阶乘rank, 参与计算的是res = k-1，res_idx代表res除以阶乘后的整数部分
     * for j = 1...n-1
     *     res_idx = res/rank;
     *     kth_permutation[j] = (char)(find(nums, n, res_idx+1)+'0');//find是查找当前未用到的第res_idx+1个字符
     *     res -= res_idx*rank;
     *     rank = rank/(n-1-j);//降阶
     * 最后一个字符就是所有字符中未用到的那个字符
     */
    char* getPermutation(int n, int k) {
        //nums[i] == 0代表字符i还未被选择过，否则代表已经被选择了
        int* nums = (int*)malloc(sizeof(int)*(n));
        char* kth_permutation = (char*)malloc(sizeof(char)*(n+1));
        if(NULL==nums || NULL==kth_permutation)
            printf("malloc error!");
        //初始化
        memset(nums, 0, sizeof(int)*n);
        memset(kth_permutation, '\0', sizeof(char)*(n+1));
        
        int rank=1;
        //求(n-1)!
        for(int i=1; i<=n-1; i++){
            rank *= i;
        }
        /*
         * 根据输入的k从低到高判断每个位置上的符号
         * res是判断某位后剩下需要判断的值
         * res_idx是res_k除以当前阶级的整数部分
         * rank是当前阶级
         */
        int res = k-1;
        int res_idx;
        int j;
        for(j=0; j<n-1; j++){
            res_idx = res/rank;
            kth_permutation[j] = (char)(find(nums, n, res_idx+1)+'0');
            res -= res_idx*rank;//参与的数
            rank = rank/(n-1-j);//降阶
        }
        //还剩下一位
        kth_permutation[j] = (char)(find(nums, n, 1)+'0');

        for(int i=0; i<n; i++){
            printf("%d %c\n", nums[i], kth_permutation[i]);
        }
        return kth_permutation;
    }

#elif(ALGORITHM_SELECT == NEXT_PERMUTATION)
    /*用与两个数交换*/
    void swap(char* a, char *b){
        char tmp = *a;
        *a = *b;
        *b = tmp;
    }
    /*反转一个数组的数据*/
    void reverse(char* nums, int start, int end){
        for(int i=0; i<(end-start+1)/2; i++){
            swap(nums+start+i, nums+end-i);
        }
    }
    /*
    * 用于qsort函数的升序比较函数
    */
    int cmp_inc (const void *a , const void *b ){ 
        return (*(char *)a - *(char *)b); 
    }

    /*求字典序的下一个排列
     *与全排列不同，若要求下一个排列需要从底到顶
    1. Find the largest index k such that nums[k] < nums[k + 1]. If no such index exists, the permutation is sorted in descending order,
    just reverse it to ascending order and we are done. For example, the next permutation of [3, 2, 1] is [1, 2, 3].
    2. Find the largest index l greater than k such that nums[k] < nums[l].
    3. Swap the value of nums[k] with that of nums[l].
    4. Reverse the sequence from nums[k + 1] up to and including the final element nums[nums.size() - 1].
    */
    void nextPermutation(char* nums, int numsSize) {
        if(0==numsSize || 1==numsSize)
            return ;
        //步骤1 找到nums[k] < nums[k + 1]的最大k值
        int k = -1;
        for(int i=0; i<numsSize-1; i++){
            if(nums[i] < nums[i+1])
                k = i;
        }
        //如果是-1，说明数据本身就是逆序了
        if(k==-1){
            reverse(nums, 0, numsSize-1);
            return ;
        }
        //步骤2 找到最大的下标l使得nums[k] < nums[l]
        int l=k;
        for(int i=k+1; i<numsSize; i++){
            if(nums[i] > nums[k])
                l = i;
        }
        //步骤三 交换k与l
        swap(nums+k, nums+l);
        //步骤四
        reverse(nums, k+1, numsSize-1);
    }

    /*
     *用于求第k个排列
     *采用的方法是基于31道题的下一个排列
     *先构造一个排列，然后进行k-1次下一个排列即是第k个排列
     */
    char* getPermutation(int n, int k){
        char* nums = (char*)malloc(sizeof(char)*(n+1));
        if(NULL == nums)//申请内存失败
            printf("malloc nums error!\n");
        for(int i=1; i<=n; i++)//构造第一个排列
            nums[i-1] = (char)(i+'0');
        nums[n] = '\0';//用于后台打印结束
        for(int i=0; i<k-1; i++)//求第一个排列后的k-1个排列，即第k个排列
            nextPermutation(nums, n);
        return nums;
    }
#endif
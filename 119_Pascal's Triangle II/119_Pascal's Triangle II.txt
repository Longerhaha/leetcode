/**
 * Return an array of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */

/*
 * 优化到你的算法到 O(k) 空间复杂度
 * 意味这申请一片k长度的内存，只要算出每行后，将数据copy到改行，然后基于该片内存继续算下一行，如此反复知道最后一行
 */
int* getRow(int rowIndex, int* returnSize) {
    int* pre_row = (int*)malloc(sizeof(int)*(rowIndex+1));
    assert(pre_row != NULL);
    *returnSize = rowIndex+1;
    for(int i=0; i<(rowIndex+1); i++){
        int row_ans[i+1];
        //左、右两个1
        row_ans[0] = 1;
        row_ans[i] = 1;
        //左部分递推公式
        for(int j=1; j<=i/2; j++)
            row_ans[j] = pre_row[j-1] + pre_row[j];
        //利用对称性
        for(int j=i/2+1; j<i; j++)
            row_ans[j] = row_ans[i-j];
        memcpy(pre_row, row_ans, sizeof(int)*(i+1));
    }
    return pre_row;
}
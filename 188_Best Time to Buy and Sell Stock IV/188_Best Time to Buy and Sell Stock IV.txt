#define MAX(a, b) ((a)>(b) ? (a):(b))

int maxProfit(int k, int* prices, int pricesSize) {
    if (pricesSize == 0) 
        return 0;
    /*
     * 此方法的复杂度是O(kn)，若k较大，此时复杂度太大 
     * 当允许的交易量大于股票的价格，利用差分把全部可以获得利益的交易吃掉
     */
    if (k >= pricesSize) 
        return solveMaxProfit(prices, pricesSize);
    /*
     * 此方法的复杂度是O(kn)
     */
    int g[k + 1];
    int l[k + 1];
    memset(g, 0, sizeof(int)*(k+1));
    memset(l, 0, sizeof(int)*(k+1));
    for (int i = 0; i < pricesSize - 1; ++i) {
        int diff = prices[i + 1] - prices[i];
        for (int j = k; j >= 1; --j) {
            l[j] = MAX(g[j - 1] + MAX(diff, 0), l[j] + diff);
            g[j] = MAX(g[j], l[j]);
        }
    }
    return g[k];
}
/*
 * 当允许的交易量大于股票的价格
 * 此时利用差分全部吃掉有利益的交易即可
 */
int solveMaxProfit(int* prices, int pricesSize) {
    int res = 0;
    for (int i = 1; i < pricesSize; ++i) {
        if (prices[i] - prices[i - 1] > 0) {
            res += prices[i] - prices[i - 1];
        }
    }
    return res;
}
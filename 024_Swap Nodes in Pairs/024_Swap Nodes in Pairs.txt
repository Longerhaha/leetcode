/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
#define GROUP 2
/* 
 * K个一组反转链表
 * K个一组也适用2个一组
 * pre_reversed_tail记录上一个已反转链表的尾巴
 * nextGroupHead记录下一组待反转链表的头（可能反转也可能不反转）
 *  
 * ret指向该反转链表反转后的尾巴，即该反转链表的头
 * pre指向反转链表的第一个节点
 * cur指向反转链表的第二个节点
 * next指向反转链表的第三个节点
 *
 * 反转规则：当next不是下一个反转链表的头，则反转cur所指向的节点，即cur->next = pre，然后整体又移一个节点，直到next与nextGroupHead相等。
 *
 * 例子：  tmpHead(临时空头节点)  -> 1 -> 2 -> 3 -> 4
 *        pre_reversed_tail=tmpHead，因为是两个一组反转，所以nextGroupHead为第三个节点的指针，即数据3的指针。
 *        tmpHead(临时空头节点)  -> 1   ->   2   ->   3   ->   4
 *                                pre      cur      next
 *        1、next与nextGroupHead相等，直接跳出大循环
 *        2、tmpHead  -> 1   ->   2   ->   3   ->   4 
 *
 *                      pre  <-  cur <-|   next  <-|
 *                       |             |           |
 *                       --------------|------------
 *         pre_reversed_tail-----------
 *           第一次反转后变成：
 *               tmpHead  -> 2   ->   1   ->   3   ->   4  
 *           继续反转3,4：
 *               tmpHead  -> 2   ->   1   ->   4   ->   3  
 */ 
struct ListNode* reverseKNode(struct ListNode* pre_reversed_tail, struct ListNode* nextGroupHead){
    struct ListNode* pre = pre_reversed_tail->next;
    struct ListNode* ret = pre;//当前反转链表反转后的尾巴
    struct ListNode* cur = pre->next;
    struct ListNode* next = cur->next;
    while(next != nextGroupHead){
        cur->next = pre;//反转
        //整体向右移一个节点
        pre = cur; 
        cur = next;
        next = cur->next;
    }
    //收尾处理
    pre_reversed_tail->next = cur;
    cur->next = pre;
    ret->next = nextGroupHead;
    return ret;
}

/*
 * 该题等效于2个一组反转链表
 * 1. 建立空头节点，方便处理。
 * 2. 初始化上一个反转链表的尾巴与下一个反转链表的头
 * 3. 2个一组反转链表
 * 4. 释放空头结点的内存并返回head
 */
struct ListNode* swapPairs(struct ListNode* head) {
    if(NULL == head)//无输入节点
        return NULL;
    
    //一个输入节点
    if(NULL == head->next)
        return head;
    
    //建立空头节点
    struct ListNode* emptyHead = (struct ListNode*)malloc(sizeof(struct ListNode)*1);
    if(NULL == emptyHead){
        printf("malloc emptyHead memory error!\n");
    }
    emptyHead->val = -1;
    emptyHead->next = head;
    
    //初始化上一个反转链表的尾巴与下一个反转链表的头
    struct ListNode* pre_reversed_tail = emptyHead;//上一个反转链表的尾巴
    struct ListNode* tmp = emptyHead->next;
    int k = 0;
    while(tmp){
        k++;
        tmp = tmp->next;
        if(k%GROUP == 0){ //GROUP个一组进行反转
            pre_reversed_tail = reverseKNode(pre_reversed_tail, tmp); 
        }
    }
    head = emptyHead->next;
    free(emptyHead);
    return head;
}
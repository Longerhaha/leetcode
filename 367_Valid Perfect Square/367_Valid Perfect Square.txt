/*
 * 方法1 递减法
 * 如何判读是一个数是完全平方数
 * 时间复杂度是O（n^0.5）
 * 4  = 1 + 3 = 2^2
 * 9  = 1 + 3 + 5 = 3^2
 * 16 = 1 + 3 + 5 + 7 = 4^2
 * 25 = 1 + 3 + 5 + 7 + 9 = 5^2
 * 36 = 1 + 3 + 5 + 7 + 9 + 11= 6^2
 * 
 * 相信你已经明白了
 */
#define DECREMENT  1
/*
 * 方法2 牛顿迭代公式
 * f(x) = num-x^2;
 * f'(x) = -2x
 * x' = x+f(x)/f'(x)   =>  迭代公式 x' = (x + num/x)/2;
 */
#define NEWTON     2
#define MIN_PRECISION 0.00001
#define ABS(a) ((a)>=0 ? (a):(-(a)))
/*
 * 二分法，较为简单，这里不详细写了
 */
#define BINARY_SEARCH 3

#define ALGO_SEL 2
#if ALGO_SEL == DECREMENT
    bool isPerfectSquare(int num) {
        int sqrt_num = 0;
        int subs = 1;
        while(num > 0){
            num -= subs;
            subs += 2;
        }
        if(num == 0)
            return true;
        else
            return false;
    }
#elif ALGO_SEL == NEWTON
    bool isPerfectSquare(int num) {
        /*
         *注意0的处理
         */
        if(0==num || 1==num)
            return true;
        double iter_val = num*1.0/2;
        double pre_val = 0;
        while(ABS(iter_val-pre_val) > MIN_PRECISION){
            /*
             * 牛顿迭代
             */
            pre_val = iter_val;
            iter_val = (iter_val + num*1.0/iter_val)/2;
            printf("%f %f\n", pre_val, iter_val);
        }
        iter_val = (int)iter_val;
        if(iter_val*iter_val == num)
            return true;
        else
            return false;
    }
#endif
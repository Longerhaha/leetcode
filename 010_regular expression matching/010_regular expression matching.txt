//dp[i][j]代表s[0,1,2...,i-1]和p[0,1,2,...,j-1]是否匹配
bool isMatch(char* s, char* p) {
    int len_s = strlen(s);
    int len_p = strlen(p);
    
    if(0 == len_p && len_s!=0)
        return false;
    
    if(0==len_s && len_p%2)//注意空字符串与'.*.*'输出的是true
        return false;
    
    int i,j;

    bool dp[len_s+1][len_p+1];
    for(i=0; i<len_s+1; i++)
        for(j=0; j<len_p+1; j++)
            dp[i][j] = 0;
    //处理边界
    dp[0][0] = 1;
    for(j=1; j<len_p+1; j++){
        if(p[j-1] == '*') 
            dp[0][j] = dp[0][j-2];
    }

    for(i=1; i<len_s+1; i++){
        for(j=1; j<len_p+1; j++){
            if(p[j-1] != '*'){
                dp[i][j] = dp[i-1][j-1] && (p[j-1]=='.' || s[i-1]==p[j-1]);
            }
            else{//p[j] == '*' 此时j肯定大于等于2
                dp[i][j] = dp[i][j-2] || dp[i][j-1] || (dp[i-1][j] && (p[j-2]=='.' || s[i-1]==p[j-2]));    
            }
        }
    }
    
    return dp[len_s][len_p];
    /*
    int i, j;  
    int m = strlen(s);  
    int n = strlen(p);  

    //
     * b[i + 1][j + 1]: if s[0..i] matches p[0..j] 
     * if p[j] != '*' 
     * b[i + 1][j + 1] = b[i][j] && s[i] == p[j] 
     * if p[j] == '*', denote p[j - 1] with x, 
     * then b[i + 1][j + 1] is true if any of the following is true 
     * 1) "x*" repeats 0 time and matches empty: b[i + 1][j -1] 
     * 2) "x*" repeats 1 time and matches x: b[i + 1][j] 
     * 3) "x*" repeats >= 2 times and matches "x*x": s[i] == x && b[i][j + 1] 
     * '.' matches any single character 
     //  
    bool b[m + 1][n + 1];  
    b[0][0] = true;  
    for (i = 0; i < m; i++) {  
        b[i + 1][0] = false;  
    }  
    // p[0..j - 2, j - 1, j] matches empty if p[j] is '*' and p[0..j - 2] matches empty  
    for (j = 0; j < n; j++) {  
        b[0][j + 1] = j > 0 && '*' == p[j] && b[0][j - 1];  
    }  

    for (i = 0; i < m; i++) {  
        for (j = 0; j < n; j++) {  
            if (p[j] != '*') {  
                b[i + 1][j + 1] = b[i][j] && ('.' == p[j] || s[i] == p[j]);  
            } 
            else {  
                b[i + 1][j + 1] = b[i + 1][j - 1] && j > 0 || b[i + 1][j] ||  
                            b[i][j + 1] && j > 0 && ('.' == p[j - 1] || s[i] == p[j - 1]);  
            }  
        }  
    }  
    return b[m][n];*/ 
}
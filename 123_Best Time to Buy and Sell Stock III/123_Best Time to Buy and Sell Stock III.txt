/*
 * 动态规划
 */
#define DP 1
#define MAX(a, b) ((a)>(b) ? (a):(b))


#define ALGO_SEL 1

#if ALGO_SEL == DP
    int maxProfit(int* prices, int pricesSize) {
        if(0 == pricesSize)
            return 0;
        int max_profit = 0;
        /*
         * dp[i]代表从0到i天进行一次交易可能获得的最大利润
         */
        int dp[pricesSize];
        memset(dp, 0, sizeof(int)*pricesSize);
        int min_price = prices[0];
        for(int i=1; i<pricesSize; i++){
            if(prices[i] < min_price){
                min_price = prices[i];
                dp[i] = dp[i-1];
            }  
            else
                dp[i] = MAX(dp[i-1],  prices[i]-min_price);
        }
        /*
         * 寻找从j开始下一次交易的最大收益
         */
        int right_max_price = prices[pricesSize-1];//prices[j]右侧的最大值
        for(int j=pricesSize-1; j>=0; j--){
            if(prices[j] > right_max_price){
                right_max_price = prices[j];
            }  
            max_profit = MAX(max_profit, dp[j]+right_max_price-prices[j]);
        }
        return max_profit;
    }

#endif
=/*
 * 贪心法（限制最多两次交易）
 * 在跌价的前一天卖出，然后第二天再买入，再在跌价的前一天卖出，如此反复直到结束
 */
#define GREEDY 1
/*
 * 差分法（限制最多两次交易）
 * 差分是正的则累加到利益里
 */
#define DIFF 2
#define ALGO_SEL 2

#if ALGO_SEL == GREEDY
    int maxProfit(int* prices, int pricesSize) {
        int min_idx = prices[0]<=prices[1] ? 0:-1 ;
        int search = 1;
        int max_profit = 0;
        while(search < pricesSize){
            if(prices[search] < prices[search-1]){
                max_profit += (min_idx==-1 ? 0:prices[search-1]-prices[min_idx]);
                min_idx = search;
            }
            search++;
        }
        max_profit += (min_idx==-1 ? 0:prices[pricesSize-1]-prices[min_idx]);
        return max_profit;
    }
#elif ALGO_SEL == DIFF
    int maxProfit(int* prices, int pricesSize) {
        int max_profit = 0, aacum_profit_one_deal = 0;
        int small_deal = 0, big_deal = 0;
        int flag_deal = 0;
        for (int i = 1; i < pricesSize; i++) {
            //吃掉
            if(prices[i] - prices[i-1] > 0)
                aacum_profit_one_deal += prices[i] - prices[i-1];
            //吃结束了
            else
                flag_deal = 1;
            
            if(i == pricesSize-1)
                flag_deal = 1;
            /*
             * 如果不可以继续吃掉，则是一桩可能可以的交易
             */
            if(flag_deal){
                if(aacum_profit_one_deal > small_deal){
                    max_profit += aacum_profit_one_deal-small_deal;
                    if(aacum_profit_one_deal > big_deal){
                        small_deal = big_deal;
                        big_deal = aacum_profit_one_deal;
                    }
                    else small_deal = aacum_profit_one_deal;
                }
                flag_deal = 0, aacum_profit_one_deal = 0;
            }  
        }
        return max_profit;
    }
#endif
#define MAX(a, b) ((a)>(b) ? (a):(b))
/*
 * 参考：https://blog.csdn.net/linhuanmars/article/details/23236995
 * global[i][j]代表在第i天至多进行j次交易获得的最大利润
 * local[i][j]代表在第i天有交易的情况下，至多进行j次交易获得的最大利润
 */
#define LG_DP 1
/*
 * 动态规划算法
 */
#define DP 2
#define ALGO_SEL 2


/*
 * 当允许的交易量大于股票的价格
 * 此时利用差分全部吃掉有利益的交易即可
 */
int solveMaxProfit(int* prices, int pricesSize) {
    int res = 0;
    for (int i = 1; i < pricesSize; ++i) {
        if (prices[i] - prices[i - 1] > 0) {
            res += prices[i] - prices[i - 1];
        }
    }
    return res;
}



#if ALGO_SEL == LG_DP
    int maxProfit(int k, int* prices, int pricesSize) {
        if (pricesSize == 0) 
            return 0;
        /*
         * 此方法的复杂度是O(kn)，若k较大，此时复杂度太大 
         * 当允许的交易量大于股票的价格，利用差分把全部可以获得利益的交易吃掉
         */
        if (k >= pricesSize) 
            return solveMaxProfit(prices, pricesSize);
        /*
         * 此方法的复杂度是O(kn)
         */
        int g[k + 1];
        int l[k + 1];
        memset(g, 0, sizeof(int)*(k+1));
        memset(l, 0, sizeof(int)*(k+1));
        for (int i = 0; i < pricesSize - 1; ++i) {
            int diff = prices[i + 1] - prices[i];
            for (int j = k; j >= 1; --j) {
                l[j] = MAX(g[j - 1] + MAX(diff, 0), l[j] + diff);
                g[j] = MAX(g[j], l[j]);
            }
        }
        return g[k];
    }
#elif ALGO_SEL == DP
    int maxProfit(int k, int* prices, int pricesSize) {
        if (pricesSize == 0) 
            return 0;
        /*
         * 此方法的复杂度是O(kn)，若k较大，此时复杂度太大 
         * 当允许的交易量大于股票的价格，利用差分把全部可以获得利益的交易吃掉
         */
        if (k >= pricesSize) 
            return solveMaxProfit(prices, pricesSize);
        /*
         * 此方法的复杂度是O(kn)
         */
        int dp[pricesSize + 1][k + 1];
        for( int i = 0; i < pricesSize + 1; i++ )
            dp[i][0] = 0;
        for( int i = 0; i < k + 1; i++ )
            dp[0][i] = 0;
        int diff = 0;
        for( int i = 1; i < pricesSize + 1; i++ ){
            diff = i<=1 ? 0 : prices[i-1] - prices[i-2];
            for( int j = 1; j < k + 1; j++ ){
                dp[i][j] = MAX(dp[i-1][j], MAX(dp[i-1][j] + diff, dp[i-1][j-1] + MAX(diff, 0)));
            }
        }
        
        for( int i = 0; i< pricesSize + 1; i++ ){
            for( int j = 0; j < k + 1; j++ ){
                printf("%d ", dp[i][j]);
                if(j == k)
                    printf("\n");
            }
        }
        return dp[pricesSize][k];
        
    }


#endif



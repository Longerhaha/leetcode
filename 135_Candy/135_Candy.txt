/*
 * 1.正向扫描一遍，如果右边的评分比左边高，那么右边的糖果数就比左边多一个，否则只给一个糖果
 * 2.反向扫描一遍，如果左边的评分比右边高，并且左边的糖果数比右边少，那么左边的糖果数应比右边多一
 */


int candy(int* ratings, int ratingsSize) {
    int least_candy = 0;
	int candy[ratingsSize];
	candy[0] = 1;
	//正向扫描一遍，如果右边的评分比左边高，那么右边的糖果数就比左边多一个，否则只给一个糖果
	for( int i = 1; i < ratingsSize; i++ ){
		if(ratings[i] > ratings[i - 1]) 
			candy[i] = candy[i - 1] + 1;
		//else if(ratings[i] == ratings[i - 1])
		//    candy[i] = candy[i - 1];
		else 
			candy[i] = 1;
	}
	//反向扫描一遍，如果左边的评分比右边高，并且左边的糖果数比右边少，那么左边的糖果数应比右边多一
	for( int i = ratingsSize - 2; i >= 0; i-- ){
		if(ratings[i] > ratings[i + 1] && candy[i] <= candy[i + 1]){
			candy[i] = candy[i + 1] + 1;
		}
		//else if(ratings[i] == ratings[i + 1])
		//	candy[i] = candy[i + 1];
	}
	
	for( int i = 0; i < ratingsSize; i++ ){
		least_candy += candy[i];
        //printf("%d ", candy[i]);
	}
        
	return least_candy;
}
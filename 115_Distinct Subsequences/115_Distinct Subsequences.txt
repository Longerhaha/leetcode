/*
 * 明显是一道动态规划类的题目
 * 1.问题可以分解为子问题
 * 2.问题可以右子问题的答案构成
 * 递推表达式：
 *     dp[i][j] = dp[i-1][j] + (s[i-1] == t[j-1]) ? dp[i-1][j-1]:0;
 */
#define MAX(a, b) ((a)>=(b) ? (a):(b))
int numDistinct(char* s, char* t) {
    int len_s = strlen(s);
    int len_t = strlen(t);
    //printf("%d %d\n", len_s, len_t);
    int dp[len_s+1][len_t+1];
    /*
     * 第一列
     */
    dp[0][0] = 1;
    for(int i=1; i<=len_s; i++)
        dp[i][0] = 1;
    /*
     * i<j的部分
     */
    for(int j=0; j<=len_t; j++){
        for(int i=0; i<j; i++){
            dp[i][j] = 0;
        }
    }
    
    /*
     * i>=j的部分
     */
    for(int j=1; j<=len_t; j++){
        for(int i=j; i<=len_s; i++){
            if(s[i-1] != t[j-1]){ //如果当前字符不相等，则看s[i-1]与t[j]的比较情况
                dp[i][j] = dp[i-1][j];
            }
            else{ //如果当前字符相等，则dp[i][j]分为包含该字符s[i]的子串与不包含字符s[i]的子串
                dp[i][j] = dp[i-1][j] + dp[i-1][j-1];
            }
        }
    }
    return dp[len_s][len_t];
}
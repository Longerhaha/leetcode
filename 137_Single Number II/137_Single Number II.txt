

/*
 * 位计数法
 * 如果该位上的1的个数是3n1,则说明出现一次元素的该位上不是1，反之亦然。
 */
const int bw_int = 32;
#define BIT_CNT 1

/*
 * 基于位的卡诺图法
 * 位计算法的核心在于计算是否为3的倍数，那为什么不让当计数为3后，则清零呢？基于位的卡诺图和位计满清除法的目地都是当计数满3后则清零。
 * one的每位记录此次运算后的1的个数是否是1个，如果是则该位为1，否则该位为0
 * two的每位记录此次运算后的1的个数是否是2个，如果是则该位为1，否则该位为0
 * one_pre记录上一次运算one的结果
 * two_pre记录上一次运算two的结果
 * (1)one每一位的计算与输入数据、one_pre、two_pre结果有关，真值表如下：
 *    (d代表无关项)
 *      *p_xbit     0 0 0 0 1 1 1 1
 *    one_pre_xbit  0 0 1 1 0 0 1 1
 *    two_pre_xbit  0 1 0 1 0 1 0 1
 *      one_xbit    0 0 1 d 1 0 0 d  
 *    画出卡诺图后可以得到one的逻辑表达式
 *    one = (~*p & one_pre) | (*p & ~one_pre & ~two_pre);
 * (2)two每一位的计算与输入数据、one_pre、two_pre结果有关，真值表如下：
 *    (d代表无关项)
 *      *p_xbit     0 0 0 0 1 1 1 1
 *    one_pre_xbit  0 0 1 1 0 0 1 1
 *    two_pre_xbit  0 1 0 1 0 1 0 1
 *      one_xbit    0 1 0 0 0 0 1 d
 *    画出卡诺图后可以得到two的逻辑表达式
 *    two = (*p & one_pre) | (~*p & ~one_pre & two_pre)
 *
 */
#define BIT_KARNAUGH_MAP 2

/*
 * 位计满清除法
 * one的每位记录此次运算后的1的个数是否是1个，如果是则该位为1，否则该位为0
 * two的每位记录此次运算后的1的个数是否是2个，如果是则该位为1，否则该位为0
 * three的每位记录此次运算后的1的个数是否是3个，如果是则该位为1，否则该位为0
 * 注意每次上述三个值计算完毕后需要对one、two进行更新，因为three的某一位为1后，则需要对one和two的那一位清零（three不需要清零，因为这样子操作后，下一次操作在one和two的该位上肯定不会同时为1，所以下一次操作，three的该位经过逻辑运算后就为0了）
 */
#define BIT_FULL_CLEAR 3

#define ALGO_SELECT 3

#if ALGO_SELECT == BIT_CNT
    int singleNumber(int* nums, int numsSize) {
        int rslt = 0;
        for( int i = 0; i < bw_int; i++ ){
            int mask = 1 << i;
            int cnt = 0;
            for( int j = 0; j < numsSize; j++ ){
                if(nums[j] & mask)
                    cnt++;
            }
            if(cnt % 3)
                rslt |= mask;
        }
        return rslt;
    }
#elif ALGO_SELECT == BIT_KARNAUGH_MAP

    int singleNumber(int* nums, int numsSize) {
        int one = 0, one_pre = 0, two = 0, two_pre = 0;
        int* p = nums;
        while( p < nums + numsSize ){
            one = (~*p & one_pre) | (*p & ~one_pre & ~two_pre);
            two = (*p & one_pre) | (~*p & ~one_pre & two_pre);
            one_pre = one;
            two_pre = two;
            p++;
        }
        return one;
    }
#elif ALGO_SELECT == BIT_FULL_CLEAR
    int singleNumber(int* nums, int numsSize) {
        int one = 0;
        int two = 0;
        for( int i = 0 ; i < numsSize ; i++ )
        {
            two |= nums[i] & one;
            one ^= nums[i];
            int three = one & two;
            one &= ~three;
            two &= ~three;
        }
        return one;
    }
#endif
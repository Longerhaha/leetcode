/**
 * Return an array of arrays of size *returnSize.
 * Note: The returned array must be malloced, assume caller calls free().
 */

//升序
int cmp_inc (const void *a , const void *b ){ 
    return (*(int *)a - *(int *)b); 
} 

int** fourSum(int* nums, int numsSize, int target, int* returnSize) {
    int l=0, i=0, j=0, k, num_res=0;
    int res_maxSize = numsSize*6;
    //申请二维指针
    int **res = (int**)malloc(sizeof(int*)*(res_maxSize));
    
    //升序排序,有利于重复三元组的判定
    qsort(nums, numsSize, sizeof(int), cmp_inc);
    int flag_i_success = 0;
    int flag_l_success = 0;
    for(l=0; l<numsSize-3; l++){
        if(4*nums[l] > target)//由于是有序的，比这个四倍还大，则结束当前循环
            continue;

        if(l>=1 && nums[l]==nums[l-1])//处理四数中的第一个数重复的数据
        {
            if(flag_l_success){ //若第i-1轮找到了，则跳过有重复数据直至其与下一个数据不等
                while(nums[l]==nums[l-1])
                    l++;
            }
            flag_l_success = 0;//i论有找到的标志
        }
        flag_i_success = 0;//新l轮开始了，flag_i_success置0
        for(i=l+1; i<(numsSize-2); i++){
            if((nums[l]+3*nums[i]) > target)//由于是有序的，比这个四倍还大，则结束当前循环
                continue;
            if(i>=1 && nums[i]==nums[i-1])//处理四数中的第二个数重复的数据
            {
                if(flag_i_success){ //若第i-1轮找到了，则跳过有重复数据直至其与下一个数据不等
                    while(nums[i]==nums[i-1])
                        i++;
                }
                flag_i_success = 0;//i轮有找到的标志
            }
            j = i+1;//j位于i的下一个下标
            k = numsSize-1;//k位于数据末尾
            while(j < k){
                //处理四数中的第三个数重复的数据
                if(nums[j] == nums[j+1]){
                    if(target == (nums[l]+nums[i]+2*nums[j])){
                        res[num_res] = (int*)malloc(sizeof(int)*4); 
                        res[num_res][0] = nums[l];
                        res[num_res][1] = nums[i];
                        res[num_res][2] = nums[j];
                        res[num_res][3] = nums[j];
                        num_res++;
                        flag_i_success = 1;
                        flag_l_success = 1;
                    }
                    while(nums[j] == nums[j+1]) //直到与下个数不等
                        j+=1;    
                }
                //处理四数中的第四个数重复的数据
                if(k>j && nums[k]==nums[k-1]){
                    if(target == (nums[l]+nums[i]+2*nums[k])){
                        res[num_res] = (int*)malloc(sizeof(int)*4); 
                        res[num_res][0] = nums[l];
                        res[num_res][1] = nums[i];
                        res[num_res][2] = nums[k];
                        res[num_res][3] = nums[k];
                        num_res++;
                        flag_i_success = 1;
                        flag_l_success = 1;
                    }
                    while(nums[k] == nums[k-1]) //直到与下个数不等
                        k-=1;    
                }    

                if(target==(nums[l]+nums[i]+nums[j]+nums[k]) && j<k){
                    res[num_res] = (int*)malloc(sizeof(int)*4); 
                    res[num_res][0] = nums[l];
                    res[num_res][1] = nums[i];
                    res[num_res][2] = nums[j];
                    res[num_res][3] = nums[k];
                    num_res++;
                    j+=1; 
                    flag_i_success = 1;
                    flag_l_success = 1;
                }
                else if((target-(nums[l]+nums[i]+nums[j]))<=nums[k])
                    k--;
                else
                    j++;
                //printf("%d, %d, %d, %d\n", l, i, j, k);
                
            }
        }
    }
    *returnSize = num_res;
    return res;
}
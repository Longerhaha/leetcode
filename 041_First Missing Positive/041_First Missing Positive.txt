/*
 * 交换两个数的值
 */
void swap(int* data1, int * data2){
    int tmp = *data1;
    *data1 = *data2;
    *data2 = tmp;
}
/*
 * O(n)时间复杂度和常数空间的解决方案
 * nums[i]存放正数i+1
 * 1.从i=0到numsSize-1遍历，若当前的位置的值大于0小于等于numsSize且nums[nums[i]-1]的位置不是i，则交换nums[i]与nums[(nums[i]-1)];
 *   注意交换后仍需判断该位置是否是符合规则的
 * 2.从头开始根据规则（nums[i]存放正数i+1）寻找最小缺失的正数
 */
int firstMissingPositive(int* nums, int numsSize) {
    for (int i = 0; i < numsSize;) {
        /*
         * 这里找位置来存放一个正整数
         * 注意交换位置后仍需要判断，所以是while
         * 比如输入[3 4 -1 1]
         * 第一次判断第一个位置i=0, 此位置的值是3，因此交换3与-1，变为[-1 4 3 1],此时继续判断第一个数，其是-1，跳出while循环，i+1
         * 第二次判断第二个位置i=1，此位置的值是4，因此交换4与1，变为[-1 1 3 4],此时继续判断第二个数，其是1，交换-1与1，变换[1 -1 3 4]，继续判断第一个数，其是-1，跳出while循环，i+1
         * 第三次判断第三个位置i=2，刚好是3，跳出while循环，i+1
         * 第四次判断第三个位置i=3，刚好是4，跳出while循环并跳出for循环
         *      
         * 一轮后的结果是[1 -1 3 4]，于是缺失的最小正数是2
         * 如果在第二次判断时没有继续判断，即while改成if，则结果将会是[-1 1 3 4]，缺失的最小正数是1，结果错误
         */
        while(nums[i] > 0 && nums[i] <= numsSize && nums[i] != nums[nums[i]-1])
            swap(nums+i, nums+(nums[i]-1));
        i++;
    }
    //寻找缺失的最小正数
    int i;
    for (i = 1; i <= numsSize; i++)
        if (nums[i-1] != i)
            return i;
    return i;
}
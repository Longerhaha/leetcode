//检查含有九个数的正方形块
bool CheckBlock(char** board, int center_i, int center_j){
    int i,j;
    int check_block[9]={0};
    memset(check_block, 0, 9*sizeof(int));
    for(i=center_i-1; i<=center_i+1; i++){
        for(j=center_j-1; j<=center_j+1; j++){
            if('.'==board[i][j])
                continue;
            if(1 == check_block[(int)(board[i][j]-'1')])
                return false;
            else
               check_block[(int)(board[i][j]-'1')] = 1; 
        }
    }
    return true;
}
//检查行列 row_pos==col_pos
bool CheckRowCol(char** board, int row_pos, int col_pos){
    int i,j;
    int check_row[9]={0};
    int check_col[9]={0};
    memset(check_row, 0, 9*sizeof(int));
    memset(check_col, 0, 9*sizeof(int));
    //检查行
    for(j=0; j<9; j++){
        if('.' == board[row_pos][j])
            continue;
    
        if(1 == check_row[(int)(board[row_pos][j]-'1')])
            return false;
        else
           check_row[(int)(board[row_pos][j]-'1')] = 1; 
    }
    //检查列
    for(i=0; i<9; i++){
        if('.'==board[i][col_pos])
            continue;

        if(1 == check_col[(int)(board[i][col_pos]-'1')])
            return false;
        else
           check_col[(int)(board[i][col_pos]-'1')] = 1; 
    }
    return true;
}

//判断当前的数独是不是一个有效数独
bool isValidSudoku(char** board, int boardRowSize, int boardColSize){
    int i=0, j=0;
    for(i=0; i<boardRowSize; i++){
        for(j=0; j<boardColSize; j++){
            if((i%3==1) && (j%3==1)){
                if(!CheckBlock(board, i, j)){//无效
                    //printf("%d, %d\n", i, j);
                    return false;
                }
            }
            if(i == j){
                if(!CheckRowCol(board, i, j)){//无效
                    //printf("%d, %d\n", i, j);
                    return false;
                }
            }
        }
    }
    return true; 
}
//先列后行搜索
bool solveSudoku_DFS(char** board, int i, int j){
    if(i>8)
        return solveSudoku_DFS(board, 0, j+1);
    if(j>8)
        return true;
    int k;
    if(board[i][j] == '.'){
        for(k=1; k<=9; k++){
            board[i][j] = (char)(k+'0');
            if(isValidSudoku(board, 9, 9)){
                if(solveSudoku_DFS(board, i+1, j))
                    return true;
            }

            board[i][j] = '.';
        } 
        return false;//尝试了所有的可能
    }
    else{
        return solveSudoku_DFS(board, i+1, j);  
    }
   
}

void TraverseBoard(char** board){
    int i,j;
    for(i=0; i<9; i++){
        for(j=0; j<9; j++){
            printf("%c  ", board[i][j]);
            if(j==8)
                printf("\n");
        }
        
    }
}


void solveSudoku(char** board, int boardRowSize, int boardColSize) {
    solveSudoku_DFS(board, 0, 0);
    //printf("%d\n",solveSudoku_DFS(board, 0, 0)); 
    //TraverseBoard(board);
}